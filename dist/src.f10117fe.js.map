{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;ADAA,IAAA,QAAA;ACEA,ADFA,ICEM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AAEA,ADJA,QCIQ,CAAC,GDJT,GCIA;EDHE,SAAA,QAAA,CAAmB,MAAnB,EAAkC;IAAf,KAAA,MAAA,GAAA,MAAA;EAAmB;;EAEtC,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;IACE,OAAO;MACL,gBAAgB,KAAK,aADhB;MAEL,iBAAiB,KAAK;IAFjB,CAAP;EAID,CALD;;EAOA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IACE,OAAO,CAAC,GAAR,CAAY,qBAAZ;EACD,CAFD;;EAIA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IACE,OAAO,CAAC,GAAR,CAAY,UAAZ;EACD,CAFD;;EAIA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,OAAO,uGAAP;EAOD,CARD;;EAUA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAqC;IACnC,IAAM,SAAS,GAAG,KAAK,SAAL,EAAlB;;mCACS,UAAQ;MACT,IAAA,EAAA,GAAwB,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAxB;MAAA,IAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;MAAA,IAAY,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApB;;MAEN,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAC,OAAD,EAAQ;QAClD,OAAO,CAAC,gBAAR,CAAyB,SAAzB,EAAoC,SAAS,CAAC,QAAD,CAA7C;MACD,CAFD;;;IAHF,KAAK,IAAI,QAAT,IAAqB,SAArB,EAA8B;cAArB;IAMR;EACF,CATD;;EAWA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IACE,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;IACA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;IAEA,KAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;IAEA,KAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;EACD,CAPD;;EAQF,OAAA,QAAA;AA/CA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\r\n  constructor(public parent: Element) {}\r\n\r\n  eventsMap(): { [key: string]: () => void } {\r\n    return {\r\n      \"click:button\": this.onButtonClick,\r\n      \"mouseenter:h1\": this.onHeaderHover,\r\n    };\r\n  }\r\n\r\n  onHeaderHover(): void {\r\n    console.log(\"H1 was hovered over\");\r\n  }\r\n\r\n  onButtonClick(): void {\r\n    console.log(\"Hi There\");\r\n  }\r\n\r\n  template(): string {\r\n    return `\r\n    <div>\r\n      <h1>User Form</h1>\r\n      <input/>\r\n      <button>Click</button>\r\n    </div>\r\n    `;\r\n  }\r\n\r\n  bindEvents(fragment: DocumentFragment): void {\r\n    const eventsMap = this.eventsMap();\r\n    for (let eventKey in eventsMap) {\r\n      const [eventName, selector] = eventKey.split(\":\");\r\n\r\n      fragment.querySelectorAll(selector).forEach((element) => {\r\n        element.addEventListener(eventName, eventsMap[eventKey]);\r\n      });\r\n    }\r\n  }\r\n\r\n  render(): void {\r\n    const templateElement = document.createElement(\"template\");\r\n    templateElement.innerHTML = this.template();\r\n\r\n    this.bindEvents(templateElement.content);\r\n\r\n    this.parent.append(templateElement.content);\r\n  }\r\n}\r\n","import { UserForm } from \"./views/UserForm\";\r\n\r\nconst userForm = new UserForm(document.getElementById(\"root\"));\r\n\r\nuserForm.render();\r\n"]}